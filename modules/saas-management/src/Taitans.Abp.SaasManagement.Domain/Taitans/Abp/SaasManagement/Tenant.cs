using JetBrains.Annotations;using System;using System.Collections.Generic;using System.Linq;using Volo.Abp;using Volo.Abp.Domain.Entities.Auditing;using Volo.Abp.MultiTenancy;namespace Taitans.Abp.SaasManagement{    public class Tenant : FullAuditedAggregateRoot<Guid>, IMultiTenant    {        public virtual string Name { get; protected set; }        public virtual string DisplayName { get; protected set; }        public virtual List<TenantConnectionString> ConnectionStrings { get; protected set; }        public virtual Edition Edition { get; protected set; }        public virtual Guid? EditionId { get; protected set; }        public virtual string EditionName => Edition?.DisplayName;        public Guid? TenantId { get; protected set; }        public Tenant(Guid id, [NotNull] string name, string displayName, Guid? editionId, Guid? tenantId)        {            Id = id;            SetName(name);            SetDisplayName(displayName);            EditionId = editionId;            TenantId = tenantId;            ConnectionStrings = new List<TenantConnectionString>();            ExtraProperties = new Dictionary<string, object>();        }        [CanBeNull]        public virtual string FindDefaultConnectionString()        {            return FindConnectionString(Volo.Abp.Data.ConnectionStrings.DefaultConnectionStringName);        }        [CanBeNull]        public virtual string FindConnectionString(string name)        {            return ConnectionStrings.FirstOrDefault(c => c.Name == name)?.Value;        }        public virtual void SetDefaultConnectionString(string connectionString)        {            SetConnectionString(Volo.Abp.Data.ConnectionStrings.DefaultConnectionStringName, connectionString);        }        public virtual void SetConnectionString(string name, string connectionString)        {            var tenantConnectionString = ConnectionStrings.FirstOrDefault(x => x.Name == name);            if (tenantConnectionString != null)            {                tenantConnectionString.SetValue(connectionString);            }            else            {                ConnectionStrings.Add(new TenantConnectionString(Id, name, connectionString));            }        }        public virtual void RemoveDefaultConnectionString()        {            RemoveConnectionString(Volo.Abp.Data.ConnectionStrings.DefaultConnectionStringName);        }        public virtual void RemoveConnectionString(string name)        {            var tenantConnectionString = ConnectionStrings.FirstOrDefault(x => x.Name == name);            if (tenantConnectionString != null)            {                ConnectionStrings.Remove(tenantConnectionString);            }        }        public virtual void SetDisplayName(string displayName)        {            DisplayName = Check.NotNullOrWhiteSpace(displayName, nameof(displayName), TenantConsts.MaxDisplayNameLength);        }        internal void SetName([NotNull] string name)        {            Name = Check.NotNullOrWhiteSpace(name, nameof(name), TenantConsts.MaxNameLength);        }        internal void ChangeEditionId(Guid? editionId)        {            EditionId = editionId;        }    }}